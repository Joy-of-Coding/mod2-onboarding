name: Auto add to team and project
on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write

jobs:
  process:
    runs-on: ubuntu-latest
    steps:
      - name: Parse username
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || "";
            const match = body.match(/ghuser.*value:\s*"?([A-Za-z0-9-]+)"?/);
            if (!match) core.setFailed("No username found");
            core.setOutput('username', match[1].trim());

      - name: Add to team
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const org = process.env.ORG;
            const team = process.env.TEAM_SLUG;
            const username = '${{ steps.parse.outputs.username }}';
            await github.request('PUT /orgs/{org}/teams/{team_slug}/memberships/{username}', {
              org,
              team_slug: team,
              username,
              role: 'member'
            });
        env:
          ORG: ${{ secrets.ORG }}
          TEAM_SLUG: ${{ secrets.TEAM_SLUG }}

    #   - name: Check if team already has access to project board
    #     id: check-access
    #     uses: actions/github-script@v7
    #     with:
    #       github-token: ${{ secrets.GH_TOKEN }}
    #       script: |
    #         const org = process.env.ORG;
    #         const projectId = process.env.PROJECT_ID;
    #         const teamSlug = process.env.TEAM_SLUG;

    #         console.log(`Checking project access for team ${teamSlug}...`);
    #         try {
    #           const res = await github.request('GET /orgs/{org}/projects/{project_id}/teams', {
    #             org,
    #             project_id: projectId,
    #           });
    #           const hasAccess = res.data.some(t => t.slug === teamSlug);
    #           core.setOutput('hasAccess', hasAccess);
    #           console.log(`Team already has access: ${hasAccess}`);
    #         } catch (error) {
    #           console.log('Error fetching project teams:', error.message);
    #           core.setOutput('hasAccess', false);
    #         }
    #     env:
    #       ORG: ${{ secrets.ORG }}
    #       PROJECT_ID: ${{ secrets.PROJECT_ID }}
    #       TEAM_SLUG: ${{ secrets.TEAM_SLUG }}

    #   - name: Grant team project board access (only if needed)
    #     if: steps.check-access.outputs.hasAccess == 'false'
    #     uses: actions/github-script@v7
    #     with:
    #       github-token: ${{ secrets.GH_TOKEN }}
    #       script: |
    #         const org = process.env.ORG;
    #         const projectId = process.env.PROJECT_ID;
    #         const teamSlug = process.env.TEAM_SLUG;

    #         console.log(`Granting write access to team ${teamSlug} for project ${projectId}...`);
    #         await github.request('PUT /orgs/{org}/projects/{project_id}/teams/{team_slug}', {
    #           org,
    #           project_id: projectId,
    #           team_slug: teamSlug,
    #           permission: 'write'
    #         });
    #     env:
    #       ORG: ${{ secrets.ORG }}
    #       PROJECT_ID: ${{ secrets.PROJECT_ID }}
    #       TEAM_SLUG: ${{ secrets.TEAM_SLUG }}

      - name: Comment success
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const username = '${{ steps.parse.outputs.username }}';
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `âœ… @${username} has been added to the Admissions team and granted access to the [Admissions Project Board](https://github.com/orgs/Joy-of-Coding/projects/7).`
            });
