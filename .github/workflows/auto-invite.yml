name: Auto-join AdmissionsTeam
on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write

jobs:
  join:
    if: |
      github.event.action == 'opened' || 
      (github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'join-request'))
    runs-on: ubuntu-latest
    steps:
      - name: Ensure required secrets
        run: |
          test -n "${{ secrets.ORG }}" && test -n "${{ secrets.TEAM_SLUG }}" || { echo "Missing ORG or TEAM_SLUG"; exit 1; }

      # If using a GitHub App (recommended), create an installation token first:
      - name: Generate GitHub App installation token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ secrets.ORG }}

      - name: Extract form inputs
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const body = context.payload.issue.body || "";
            const uMatch = body.match(/ghuser.*\n.*value:\s*"?([A-Za-z0-9-]+)"?/);
            const eMatch = body.match(/email.*\n.*value:\s*"?([^"\n]+)"?/);
            const username = uMatch ? uMatch[1].trim() : null;
            const email = eMatch ? eMatch[1].trim() : null;
            if (!username) {
              core.setFailed("No GitHub username provided.");
            }
            core.setOutput('username', username);
            core.setOutput('email', email || '');

      - name: Check if user is already in org
        id: check-member
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const username = '${{ steps.parse.outputs.username }}';
            try {
              await github.request('GET /orgs/{org}/members/{username}', { org, username });
              core.setOutput('isMember', 'true');
            } catch (e) {
              core.setOutput('isMember', 'false');
            }
        env:
          ORG: ${{ secrets.ORG }}

      - name: Invite user to organization if not a member
        if: steps.check-member.outputs.isMember == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const username = '${{ steps.parse.outputs.username }}';
            const email = '${{ steps.parse.outputs.email }}';
            
            let invitee_id = null;
            try {
              const user = await github.request('GET /users/{username}', { username });
              invitee_id = user.data.id;
            } catch (err) {
              console.log(`Could not fetch user ID for ${username}: ${err}`);
            }

            const params = { org };
            if (invitee_id) params.invitee_id = invitee_id;
            if (email) params.email = email;

            const res = await github.request('POST /orgs/{org}/invitations', params);
            core.info(`Invitation created: ${res.status}`);
        env:
          ORG: ${{ secrets.ORG }}

      - name: Add user to team (pending if not yet accepted)
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const team_slug = process.env.TEAM_SLUG;
            const username = '${{ steps.parse.outputs.username }}';

            await github.request('PUT /orgs/{org}/teams/{team_slug}/memberships/{username}', {
              org, team_slug, username,
              role: 'member'
            });

            core.info(`Added ${username} to team ${team_slug}.`);
        env:
          ORG: ${{ secrets.ORG }}
          TEAM_SLUG: ${{ secrets.TEAM_SLUG }}

      - name: Comment status
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const username = '${{ steps.parse.outputs.username }}';
            const isMember = '${{ steps.check-member.outputs.isMember }}' === 'true';
            const note = isMember
              ? `✅ @${username} is already a member. Team access confirmed.`
              : `✉️ Invited @${username} to the org and added them to **${process.env.TEAM_SLUG}**. They’ll be active once they accept the org invite.`;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: note
            });
        env:
          TEAM_SLUG: ${{ secrets.TEAM_SLUG }}
