name: Auto-join Mod2Team
on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write

jobs:
  join:
    if: |
      github.event.action == 'opened' || 
      (github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'join-request'))
    runs-on: ubuntu-latest
    steps:
      - name: Ensure required secrets
        run: |
          test -n "${{ secrets.ORG }}" && test -n "${{ secrets.TEAM_SLUG }}" || { echo "Missing ORG or TEAM_SLUG"; exit 1; }

      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ secrets.ORG }}


      - name: Extract form inputs
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const body = context.payload.issue.body || "";
            const lines = body.split(/\r?\n/).map(l => l.trim()).filter(Boolean);

            let username = "";
            for (let i = 0; i < lines.length; i++) {
              const line = lines[i].toLowerCase();
              if (line.includes("github username")) {
                username = lines[i + 1]?.replace(/^@/, "").trim();
              }
            }

            if (!username) {
              core.setFailed(`Could not resolve username — parsed issue:\n${body}`);
              return;
            }

            core.info(`Parsed username: ${username}`);
            core.setOutput("username", username);


      - name: Check if user is already in org
        id: check-member
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const username = '${{ steps.parse.outputs.username }}';
            try {
              await github.request('GET /orgs/{org}/members/{username}', { org, username });
              core.setOutput('isMember', 'true');
            } catch (e) {
              core.setOutput('isMember', 'false');
            }
        env:
          ORG: ${{ secrets.ORG }}

      - name: Invite user to organization if not a member
        if: steps.check-member.outputs.isMember == 'false'
        id: invite
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const username = '${{ steps.parse.outputs.username }}';
            
            l// Get user ID
            const { data: user } = await github.request('GET /users/{username}', { username });
            const invitee_id = user.id;

            await github.request('POST /orgs/{org}/invitations', {
              org,
              invitee_id
            });
        env:
          ORG: ${{ secrets.ORG }}

      - name: Wait a few seconds for invitation to register
        if: steps.invite.outputs.invited == 'true'
        run: sleep 5

      - name: Add user to team (pending if not yet accepted)
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const team_slug = process.env.TEAM_SLUG;
            const username = '${{ steps.parse.outputs.username }}';

            try {
              await github.request('PUT /orgs/{org}/teams/{team_slug}/memberships/{username}', {
                org, team_slug, username, role: 'member'
              });
              core.info(`Added ${username} to team ${team_slug}.`);
            } catch (err) {
              core.warning(`Could not add ${username} to team yet: ${err.message}`);
            }
        env:
          ORG: ${{ secrets.ORG }}
          TEAM_SLUG: ${{ secrets.TEAM_SLUG }}

      - name: Comment status and close issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}  # built-in token
          script: |
            const username = '${{ steps.parse.outputs.username }}';
            const team_slug = process.env.TEAM_SLUG;

            // Determine message
            const note = `✅ @${username} has been added to **${team_slug}** (or invited if not yet accepted).`;

            // Comment on the issue
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: note
            });

            // Close the issue
            await github.rest.issues.update({
              ...context.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });
        env:
          TEAM_SLUG: ${{ secrets.TEAM_SLUG }}
