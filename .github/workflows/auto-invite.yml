name: Auto-join Mod2Team
on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write

jobs:
  join:
    if: |
      github.event.action == 'opened' || 
      (github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'join-request'))
    runs-on: ubuntu-latest
    steps:
      - name: Ensure required secrets
        run: |
          test -n "${{ secrets.ORG }}" && test -n "${{ secrets.TEAM_SLUG }}" || { echo "Missing ORG or TEAM_SLUG"; exit 1; }

      # If using a GitHub App (recommended), create an installation token first:
      - name: Generate GitHub App installation token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ secrets.ORG }}
      - name: Debug installation scope
        run: |
          curl -s -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/installation | jq '.account.login, .repository_selection'


      - name: Extract form inputs
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const body = context.payload.issue.body || "";
            const lines = body.split(/\r?\n/).map(l => l.trim()).filter(Boolean);

            let username = "";
            let email = "";

            for (let i = 0; i < lines.length; i++) {
              const line = lines[i].toLowerCase();
              if (line.includes("github username")) {
                username = lines[i + 1]?.replace(/^@/, "").trim();
              }
              if (line.includes("email")) {
                const possible = lines[i + 1]?.trim();
                if (possible && possible.includes("@")) email = possible;
              }
            }

            if (!username) {
              core.setFailed(`Could not resolve username â€” parsed issue:\n${body}`);
              return;
            }

            core.info(`Parsed username: ${username}`);
            core.info(`Parsed email: ${email || "(none)"}`);
            core.setOutput("username", username);
            core.setOutput("email", email);


      - name: Check if user is already in org
        id: check-member
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const username = '${{ steps.parse.outputs.username }}';
            try {
              await github.request('GET /orgs/{org}/members/{username}', { org, username });
              core.setOutput('isMember', 'true');
            } catch (e) {
              core.setOutput('isMember', 'false');
            }
        env:
          ORG: ${{ secrets.ORG }}

      - name: Invite user to organization if not a member
        if: steps.check-member.outputs.isMember == 'false'
        id: invite
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const username = '${{ steps.parse.outputs.username }}';
            const email = '${{ steps.parse.outputs.email }}';
            let invitee_id = null;

            // Try to get user ID from username
            try {
              const user = await github.request('GET /users/{username}', { username });
              invitee_id = user.data.id;
              core.info(`Found user ID for ${username}: ${invitee_id}`);
            } catch (err) {
              core.warning(`Could not resolve username ${username}: ${err.message}`);
            }

            // Create org invitation
            const params = { org };
            if (invitee_id) params.invitee_id = invitee_id;
            else if (email) params.email = email;
            else core.setFailed('Cannot invite: missing both GitHub username and email.');

            const res = await github.request('POST /orgs/{org}/invitations', params);
            core.info(`Invitation created. Response: ${res.status}`);
            core.setOutput('invited', 'true');
        env:
          ORG: ${{ secrets.ORG }}

      - name: Wait a few seconds for invitation to register
        if: steps.invite.outputs.invited == 'true'
        run: sleep 5

      - name: Add user to team (pending if not yet accepted)
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const team_slug = process.env.TEAM_SLUG;
            const username = '${{ steps.parse.outputs.username }}';

            try {
              await github.request('PUT /orgs/{org}/teams/{team_slug}/memberships/{username}', {
                org, team_slug, username, role: 'member'
              });
              core.info(`Added ${username} to team ${team_slug}.`);
            } catch (err) {
              core.warning(`Could not add ${username} to team yet: ${err.message}`);
            }
        env:
          ORG: ${{ secrets.ORG }}
          TEAM_SLUG: ${{ secrets.TEAM_SLUG }}

